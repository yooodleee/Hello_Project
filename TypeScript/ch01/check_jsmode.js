/**
 * 형식을 나란히 유지하기
 * 
 * 일반적인 자바스크립트 코드로 구현한 함수의 형식 정보를 편집기가 적절하게 보여주었으면 한다.
 * 하지만 JSDoc으로 복잡한 객체 형식을 정의하고 싶진 않다.
 * 
 * => 형식 정의 파일을 '옆에 나란히 둔' 상태에서 타입스크립트 컴파일러를 '자바스크립트 확인(check JavaScript)' 모드로 실행한다.
 * 
 * 타입스크립트는 점진적으로 적용할 수 있도록 설계되었다. '옆에 나란히' 두는 기법을 이용해 타입스크립트 문법으로 제네릭, 조건부 형식 등을
 * 활용해 객체 형식을 구현할 수 있으므로 복잡한 JSDoc 주석을 사용할 필요가 없다. 하지만 동시에 실제 앱은 자바스크립트로 구현할 수 있다.
 * 프로젝트에서 적당한 위치(@types 폴더 추천)에 형식 선언 파일을 만든다. 
 * 
 * 이 파일은 .ts로 끝나는 타입스크립트 파일과 조금 다르게 .d.ts로 끝난다. 이 파일은 선언(declaration)을 저장하는 용도이며 실제 코드는 
 * 포함하지 않는다. 이 파일에 인터페이스, 형식 별칭, 복잡한 형식을 구현할 수 있다.
 */

// @types/person.d.ts

// 다음과 같은 모양을 갖는 객체 인터페이스
export interface Person {
    name: string;
    age: number;
}

// 기존 인터페이스를 확장하는 인터페이스
// JSDoc 주석으로는 이를 구현하기 힘들다.
export interface Student extends Person {
    semester: number;
}

/**
 * 선언 파일에서 인터페이스를 익스포트(export) 했다는 사실을 주목하자. 익스포트한 인터페이스를 자바스크립트 파일에서
 * 임포트(import)할 수 있다.
 */

// index.js
