/*
* 자바스크립트 형식 검사하기
* 최소한의 노력으로 자바스크립트에 형식 검사 기능을 추가하려고 한다.
* => 형식 검사를 하려는 모든 자바스크립트 파일의 가장 윗부분에 @ts-check 주석을 추가한다.
*/

//@ts-check
let a_number = 1000;

/*
* 타입스크립트는 a_number의 형식을 number로 정확하게 유추한다.
* 하지만 자바스크립트의 형식은 동적이라는 점이 문제다. let, var, const로 바인딩된 변수의 형식은
* 이후 어떻게 사용하느냐에 따라 달라질 수 있다.
*/

if (Math.random() < 0.5) {
    a_number = "Hello, World!"
}

console.log(a_number * 10);

/**
 * a_number에 unmber를 할당한 다음에 if문의 조건이 참이면 이 변수를 string으로 다시 바인딩한다.
 * a_number에 숫자를 곱하지만 않는다면 문제가 없지만 예기치 않은 동작이 발생할 수 있다.
 * 
 * 하지만 타입스크립트로 이 문제를 간단히 해결할 수 있다. 자바스크립트 파일의 제일 윗부분에 @ts-check라는 주석을 
 * 추가하면 해당 자바스크립트 파일에 타입스크립트 파일에 타입스크립트의 형식 검사가 적용된다.
 * 
 * 이 에제에서 타입스크립트는 기존에 number로 유추되었던 변수 형식에 string을 다시 바인딩하려는 시도를 확인한다.
 * 따라서 편집기에서 'string' 형식은 'number' 형식에 할당할 수 없다라는 오류가 나타난다.
 * 
 * 이제 타입스크립트가 알려주는 대로 코드 오류를 고칠 수 있다.
 * 자바스크립트 형식 추론은 쉽지 않다. 다음 예제에서 타입스크립트는 기본값과 함께 곱셈, 뺄셈 등의 연산으로 형식을 유추한다.
 */

function addVAT(price, vat = 0.2) {
    return price * (1 + vat)
}

/**
 * addVAT 함수는 두 인수를 받는다. 두 번째 인수에는 default 값 0.2가 존재하므로 이 인수는 선택형이다.
 * 형식에 맞지 않는 인수를 제공하면 타입스크립트가 경고를 보낸다.
 */

//@ts-expect-error
addVAT(1000, "0.2")

/**
 * 또한 함수 본문에서 곱셈, 덧셈 연산을 수행하므로 이 함수가 number를 반환한다는 사실도 추론한다.
 * 
 * 형식 유추로는 일부 오류만 검출할 수 있다. 자바스크립트 파일에서는 함수 인수에 주석을 달아 JSDoc 형식 주석을 연결할 수 있다.
 * JSDoc(https://jsdoc/app) 주석 규칙을 이용하면 변수와 함수 인터페이스를 사람이 쉽게 읽을 수 있으며 동시에 기계도 이를 해석할
 * 수 있다. 타입 스크립트는 디르 주석을 이해할 수 있으므로 형식 시스템의 형식 검사에 이를 활용한다.
 */

//@ts-expect-error
addVAT(1000).toUpperCase()